/********************************************
* If you're here, you should know that      *		Jan
* it's my author's program. I wrote it      *
* because I wanted to punish my roommate    *
* for touching my computer when I was away  *
* from keyboard. I don't want to steal      *
* anything. This program makes annoying     *
* jokes only. You can delete this		    *
* file if you want, and that's all.         *
* Repaired!                                 *
* 											*
*											*
* If you want to make a joke to your friend *
* you should compile this file to .exe, and *
* past it to Win+R ->"shell:common startup" *
* It will start every time when windows is  *
* running. If you want to turn this program *
* off, you have to find it in task menager  *
********************************************/

#define _WIN32_WINNT 0x0500		     			 
#include "pch.h"			     			
#include <iostream>			     		       
#include <windows.h>			     			
#include <time.h>			     		 
using namespace std;
int main() {
	srand(time(NULL));
	system("color C");								//Red font looks much better
	cout << "Pokazane okno" << endl;

	HWND hWnd = GetConsoleWindow();							//Makes my program invisible!
	//ShowWindow(hWnd, SW_HIDE);
	ShowWindow( hWnd, SW_SHOW );							//Change if you want to see terminal

	unsigned short dontDoThisAgain = 1;						//Repeat the jokes? No.
	unsigned short whichOne = 0;
	while (GetAsyncKeyState(VK_CONTROL) >= 0 || GetAsyncKeyState(0x59) >= 0)
	{
		Sleep(60000*10);
		switch (whichOne) {
		case 0:
			whichOne = rand() % 24 + 1;
			cout << whichOne << endl;
			if (whichOne == dontDoThisAgain) whichOne = 0;	//As I said, don't repeat jokes...
			
			break;
		case 1:									//just some right mouse button clicks
			for (int i = 0; i < 7; i++) {
				mouse_event(MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0);
				Sleep(300);
				mouse_event(MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0);
				Sleep(1300);
			}
			dontDoThisAgain = 1;
			whichOne = 0;
			
			break;
		case 2:									//just some left mouse button clicks
			for (int i = 0; i < 7; i++) {
				mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);
				Sleep(300);
				mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
				Sleep(2000);
			}
			dontDoThisAgain = 2;
			whichOne = 0;
			break;
		case 3:									//don't waste your time... learn sth new
		{
			ShellExecute(0, 0, L"https://en.wikipedia.org/wiki/Special:Random", 0, 0, SW_SHOW);
			dontDoThisAgain = 3;
			whichOne = 0;
			break;
		}
		case 4:
		{
			ShellExecute(0, 0, L"https://www.jw.org/en/", 0, 0, SW_SHOW);
			dontDoThisAgain = 4;
			whichOne = 0;
			break;
		}
		case 5:									//theory of conspiracy
		{
			ShellExecute(0, 0, L"https://www.jasnastronamocy.info/", 0, 0, SW_SHOW);
			dontDoThisAgain = 5;
			whichOne = 0;
			break;
		}
		case 6:									//Hello darkness... My old friend
		{
			ShellExecute(0, 0, L"https://www.youtube.com/watch?v=4zLfCnGVeL4", 0, 0, SW_SHOW);
			dontDoThisAgain = 6;
			whichOne = 0;
			break;
		}
		case 7:									//Alternative medicine is a thing,
		{									//you should try Vitamin C treatment
			ShellExecute(0, 0, L"http://jerzyzieba.com/", 0, 0, SW_SHOW);
			dontDoThisAgain = 7;
			whichOne = 0;
			break;
		}
		case 8:									//The Earth is flat... Like your sister's chest :O
		{
			ShellExecute(0, 0, L"http://forumplaskaziemia.pl/forumdisplay.php?fid=11", 0, 0, SW_SHOW);
			dontDoThisAgain = 8;
			whichOne = 0;
			break;
		}
		case 9:									//something squeals...
			Beep(16000, 3000);
			dontDoThisAgain = 9;
			whichOne = 0;
			break;
		case 10:
			ShellExecute(NULL, NULL, L"C:\\Windows", NULL, NULL, SW_SHOWNORMAL);
			dontDoThisAgain = 10;
			whichOne = 0;
			break;
		case 11:
			ShellExecute(NULL, NULL, L"C:\\Program Files", NULL, NULL, SW_SHOWNORMAL);
			dontDoThisAgain = 11;
			whichOne = 0;
			break;
		case 12:								//Everyone has got Adobe
			ShellExecute(NULL, NULL, L"C:\\Program Files (x86)\\Adobe", NULL, NULL, SW_SHOWNORMAL);
			dontDoThisAgain = 12;
			whichOne = 0;
			break;
		case 13:								//I'm tired, I just want to sleep
			system("shutdown -s -t 300");
			dontDoThisAgain = 13;
			whichOne = 0;
			break;
		case 14:								//I don't trust you. Log in again
			system("rundll32.exe user32.dll, LockWorkStation");
			dontDoThisAgain = 14;
			whichOne = 0;
			break;
		case 15:								//go offline and just hang out with your friends
			for (int i = 0; i < 15; i++) {
				system("netsh wlan disconnect");
				Sleep(1000);
			}
			dontDoThisAgain = 15;
			whichOne = 0;
			break;
		case 16:								//I think you need it, you're not so good at maths
			system("start calc");
			dontDoThisAgain = 16;
			whichOne = 0;
			break;
		case 17:								//Selfie time!
			system("start microsoft.windows.camera:");
			dontDoThisAgain = 17;
			whichOne = 0;
			break;
		case 18:								//Your Wallpaper is so beautifull! I want to see it again!
			keybd_event(VK_LWIN, 0, 0, 0);
			keybd_event('M', 0, 0, 0);
			keybd_event(VK_LWIN, 0, KEYEVENTF_KEYUP, 0);
			dontDoThisAgain = 18;
			whichOne = 0;
			break;
		case 19:								//"I think something is wrong" - notepad said...
			system("start notepad.exe");
			Sleep(600);
			{
				keybd_event('I', 0, 0, 0);
				Sleep(50);
				keybd_event(VK_SPACE, 0, 0, 0);
				Sleep(50);
				keybd_event('T', 0, 0, 0);
				Sleep(50);
				keybd_event('H', 0, 0, 0);
				Sleep(50);
				keybd_event('I', 0, 0, 0);
				Sleep(50);
				keybd_event('N', 0, 0, 0);
				Sleep(50);
				keybd_event('K', 0, 0, 0);
				Sleep(50);
				keybd_event(VK_SPACE, 0, 0, 0);
				Sleep(50);
				keybd_event('S', 0, 0, 0);
				Sleep(50);
				keybd_event('T', 0, 0, 0);
				Sleep(50);
				keybd_event('H', 0, 0, 0);
				Sleep(50);
				keybd_event(VK_SPACE, 0, 0, 0);
				Sleep(50);
				keybd_event('I', 0, 0, 0);
				Sleep(50);
				keybd_event('S', 0, 0, 0);
				Sleep(50);
				keybd_event(VK_SPACE, 0, 0, 0);
				Sleep(50);
				keybd_event('W', 0, 0, 0);
				Sleep(50);
				keybd_event('R', 0, 0, 0);
				Sleep(50);
				keybd_event('O', 0, 0, 0);
				Sleep(50);
				keybd_event('N', 0, 0, 0);
				Sleep(50);
				keybd_event('G', 0, 0, 0);
				Sleep(50);
				keybd_event(VK_OEM_PERIOD, 0, 0, 0);
				Sleep(50);
				keybd_event(VK_MENU, 0, 0, 0);
				keybd_event(VK_F4, 0, 0, 0);
				keybd_event(VK_MENU, 0, KEYEVENTF_KEYUP, 0);
				Sleep(400);
				keybd_event(VK_RIGHT, 0, 0, 0);
				Sleep(100);
				keybd_event(VK_RETURN, 0, 0, 0);
				Sleep(1000);
			}
			dontDoThisAgain = 19;
			whichOne = 0;
			break;
		case 20:								//alt + tab
			keybd_event(VK_MENU, 0, 0, 0);
			keybd_event(VK_TAB, 0, 0, 0);
			Sleep(5000);
			keybd_event(VK_MENU, 0, KEYEVENTF_KEYUP, 0);
			keybd_event(VK_TAB, 0, KEYEVENTF_KEYUP, 0);
			dontDoThisAgain = 20;
			whichOne = 0;
			break;
		case 21:								//Be quiet!
			keybd_event(VK_VOLUME_MUTE, 0, 0, 0);
			dontDoThisAgain = 21;
			whichOne = 0;
			break;
		case 22:								//or be loud?
			for (int i = 0; i < 100; i++)
			{
				keybd_event(VK_VOLUME_UP, 0, 0, 0);
				Sleep(10);
			}
			dontDoThisAgain = 22;
			whichOne = 0;
			break;
		case 23:								//Shake keyboard							
			int Char;
			while (!GetAsyncKeyState(VK_DELETE))
			{
				for (Char = 65; Char < 90; Char++)
				{
					if (GetAsyncKeyState(Char) < 0)

					{
						switch (Char)
						{

						case 66:    //b
						{
							keybd_event(VK_BACK, 0, 0, 0);
							Sleep(20);
							keybd_event(77, 0, 0, 0);
							break;
						}
						case 67:    //c
						{
							keybd_event(VK_BACK, 0, 0, 0);
							Sleep(20);
							keybd_event(78, 0, 0, 0);
							break;
						}
						case 68:    //d
						{
							keybd_event(VK_BACK, 0, 0, 0);
							Sleep(20);
							keybd_event(79, 0, 0, 0);
							break;
						}
						case 70:    //f
						{
							keybd_event(VK_BACK, 0, 0, 0);
							Sleep(20);
							keybd_event(81, 0, 0, 0);
							break;
						}
						case 71:    //g
						{
							keybd_event(VK_BACK, 0, 0, 0);
							Sleep(20);
							keybd_event(82, 0, 0, 0);
							break;
						}
						case 72:    //h
						{
							keybd_event(VK_BACK, 0, 0, 0);
							Sleep(20);
							keybd_event(83, 0, 0, 0);
							break;
						}
						case 74:    //j
						{
							keybd_event(VK_BACK, 0, 0, 0);
							Sleep(20);
							keybd_event(85, 0, 0, 0);
							break;
						}
						case 75:    //k
						{
							keybd_event(VK_BACK, 0, 0, 0);
							Sleep(20);
							keybd_event(86, 0, 0, 0);
							break;
						}
						}
					}
				}
			}
			dontDoThisAgain = 23;
			whichOne = 0;
			break;
		case 24:							//When pointer gets closer to the center of the screen, program changes his position to "random"
		{
			srand(time(NULL));                              //always different numbers!
			POINT coordinates;                              //struct with X Y
			int horizontal, vertical;
			RECT desktop;
			HWND hDesktop = GetDesktopWindow();
			GetWindowRect(hDesktop, &desktop);              //get screen's dimensions
			horizontal = desktop.right;
			vertical = desktop.bottom;
			while (!GetAsyncKeyState(VK_DELETE))
			{
				GetCursorPos(&coordinates);
				if (((coordinates.x) > (horizontal / 2 - 100)) && ((coordinates.x) < (horizontal / 2 + 100)) && ((coordinates.y) > (vertical / 2 - 100)) && ((coordinates.y) < (vertical / 2 + 100))) {
					SetCursorPos(rand() % horizontal, rand() % vertical);
				}

			}

		}
		dontDoThisAgain = 24;
		whichOne = 0;
		break;
		case 25:
			cout << "This time you're lucky cause I've done nothing so keep your eyes wide open..." << endl;
			
			dontDoThisAgain = 25;
			whichOne = 0;
			break;
		}
	}
	return 0;
}
